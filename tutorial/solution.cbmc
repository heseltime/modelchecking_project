#include <stdint.h>
#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>

typedef struct {
    uint32_t pin;
    uint32_t input;
    uint8_t nread;
    uint8_t state;
} keypad_reference;

keypad_reference new_keypad_reference(uint32_t pin) {
    keypad_reference kp = {pin, 0, 0, 1};
    return kp;
}

void digit_key_reference(keypad_reference *kp, uint8_t n) {
    if (kp->state < 4) {
        kp->nread += 1;
        kp->input *= 10;
        kp->input += n;
        if (kp->nread == 4) {
            if (kp->state == 0) {
                kp->pin = kp->input;
                kp->input = 0;
                kp->nread = 0;
                kp->state += 1;
            } else if (kp->pin == kp->input) {
                kp->input = 0;
                kp->nread = 0;
                kp->state = 0;
            } else {
                kp->input = 0;
                kp->nread = 0;
                kp->state += 1;
            }
        }
    }
}
void cancel_key_reference(keypad_reference *kp) {
    if (kp->state == 5) {
        kp->state = 1;
    } else {
        kp->nread = 0;
        kp->input = 0;
    }
}
void accept_key_reference(keypad_reference *kp) {
    if (kp->state == 0) {
        kp->input = 0;
        kp->nread = 0;
        kp->state = 5;
    }
}

bool is_open_reference(keypad_reference *kp) {
    return kp->state == 5;
}

typedef struct {
    // stored PIN as a u32
    uint32_t pin;
    // current input as a u32
    uint32_t input;
    // number of read digits
    uint8_t nread;
    // keypad state:
    //  0: unlocked
    //  1: locked, 0 attempts
    //  2: locked, 1 attempts
    //  3: locked, 2 attempts
    //  4: blocked
    //  5: open
    uint8_t state;
} keypad;

keypad new_keypad(uint32_t pin) {
    keypad kp = {pin, 0, 0, 1};
    return kp;
}

void digit_key(keypad *kp, uint8_t n) {
    // if the door is either locked or unlocked
    if (kp->state <= 4) {
        // read the digit
        kp->nread += 1;
        kp->input *= 10;
        kp->input += n;
        // if four digits have been read
        if (kp->nread == 4) {
            // if the door is unlocked
            if (kp->state == 0) {
                // set the current PIN as the stored PIN
                kp->pin = kp->input;
                // reset input state
                kp->input = 0;
                kp->nread = 0;
                // set door state to locked, 0 attempts
                kp->state += 1;
            } else if (kp->pin == kp->input) {
                // if the door is not unlocked and stored PIN and the input coincide
                // reset input state
                kp->input = 0;
                kp->nread = 0;
                // set door to open
                kp->state = 0;
            } else {
                // if the door is not unlocked and store PIN and input do not coincide
                // reset input state
                kp->input = 0;
                kp->nread = 0;
                // set door to locked +1 attempt, or blocked if 2 attempts
                kp->state += 1;
            }
        }
    }
}
void cancel_key(keypad *kp) {
    // if the door is open
    if (kp->state == 5) {
        // set the door to locked, 0 attempts
        kp->state = 1;
    } else {
        // reset input state
        kp->nread = 0;
        kp->input = 0;
    }
}
void accept_key(keypad *kp) {
    // if the door is unlocked
    if (kp->state == 0) {
        // reset the input state
        kp->input = 0;
        kp->nread = 0;
        // set the door to open
        kp->state = 5;
    }
}

bool is_open(keypad *kp) {
    return kp->state == 5;
}

typedef struct {
    keypad_reference kp0;
    keypad kp1;
} keypad_harness;

keypad_harness new_harness(uint32_t pin) {
    keypad_harness kh = {new_keypad_reference(pin), new_keypad(pin)};
    return kh;
}

void check_key(keypad_harness *kh, char c) {
    if (c == 65) {
        accept_key_reference(&(kh->kp0));
        accept_key(&(kh->kp1));
    } else if (c == 67) {
        cancel_key_reference(&(kh->kp0));
        cancel_key(&(kh->kp1));
    } else {
        digit_key_reference(&(kh->kp0), c - 48);
        digit_key(&(kh->kp1), c - 48);
    }
}

bool match_open(keypad_harness *kh) {
    return is_open_reference(&(kh->kp0)) == is_open(&(kh->kp1));
}

void test_harness() {
    uint pin = nondet_uint();
    // __CPROVER_assume(pin >= 0);
    __CPROVER_assume(pin <= 9999);
    keypad_harness kh = new_harness(pin);
    uint length = nondet_uint();
    __CPROVER_assume(length < 30);
    while (length > 0) {
        char c = nondet_char();
        __CPROVER_assume((c == 65) || (c == 67) || ((48 <= c) && (c <= 57)));
        check_key(&kh, c);
        --length;
    }
    __CPROVER_assert(match_open(&kh), "the results match");
}